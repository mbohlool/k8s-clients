# coding: utf-8

"""
    Kubernetes

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: unversioned
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1alpha1PodDisruptionBudgetStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, current_healthy=None, desired_healthy=None, disruption_allowed=None, expected_pods=None):
        """
        V1alpha1PodDisruptionBudgetStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'current_healthy': 'int',
            'desired_healthy': 'int',
            'disruption_allowed': 'bool',
            'expected_pods': 'int'
        }

        self.attribute_map = {
            'current_healthy': 'currentHealthy',
            'desired_healthy': 'desiredHealthy',
            'disruption_allowed': 'disruptionAllowed',
            'expected_pods': 'expectedPods'
        }

        self._current_healthy = current_healthy
        self._desired_healthy = desired_healthy
        self._disruption_allowed = disruption_allowed
        self._expected_pods = expected_pods

    @property
    def current_healthy(self):
        """
        Gets the current_healthy of this V1alpha1PodDisruptionBudgetStatus.
        current number of healthy pods

        :return: The current_healthy of this V1alpha1PodDisruptionBudgetStatus.
        :rtype: int
        """
        return self._current_healthy

    @current_healthy.setter
    def current_healthy(self, current_healthy):
        """
        Sets the current_healthy of this V1alpha1PodDisruptionBudgetStatus.
        current number of healthy pods

        :param current_healthy: The current_healthy of this V1alpha1PodDisruptionBudgetStatus.
        :type: int
        """

        self._current_healthy = current_healthy

    @property
    def desired_healthy(self):
        """
        Gets the desired_healthy of this V1alpha1PodDisruptionBudgetStatus.
        minimum desired number of healthy pods

        :return: The desired_healthy of this V1alpha1PodDisruptionBudgetStatus.
        :rtype: int
        """
        return self._desired_healthy

    @desired_healthy.setter
    def desired_healthy(self, desired_healthy):
        """
        Sets the desired_healthy of this V1alpha1PodDisruptionBudgetStatus.
        minimum desired number of healthy pods

        :param desired_healthy: The desired_healthy of this V1alpha1PodDisruptionBudgetStatus.
        :type: int
        """

        self._desired_healthy = desired_healthy

    @property
    def disruption_allowed(self):
        """
        Gets the disruption_allowed of this V1alpha1PodDisruptionBudgetStatus.
        Whether or not a disruption is currently allowed.

        :return: The disruption_allowed of this V1alpha1PodDisruptionBudgetStatus.
        :rtype: bool
        """
        return self._disruption_allowed

    @disruption_allowed.setter
    def disruption_allowed(self, disruption_allowed):
        """
        Sets the disruption_allowed of this V1alpha1PodDisruptionBudgetStatus.
        Whether or not a disruption is currently allowed.

        :param disruption_allowed: The disruption_allowed of this V1alpha1PodDisruptionBudgetStatus.
        :type: bool
        """

        self._disruption_allowed = disruption_allowed

    @property
    def expected_pods(self):
        """
        Gets the expected_pods of this V1alpha1PodDisruptionBudgetStatus.
        total number of pods counted by this disruption budget

        :return: The expected_pods of this V1alpha1PodDisruptionBudgetStatus.
        :rtype: int
        """
        return self._expected_pods

    @expected_pods.setter
    def expected_pods(self, expected_pods):
        """
        Sets the expected_pods of this V1alpha1PodDisruptionBudgetStatus.
        total number of pods counted by this disruption budget

        :param expected_pods: The expected_pods of this V1alpha1PodDisruptionBudgetStatus.
        :type: int
        """

        self._expected_pods = expected_pods

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
